package contact;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

public class ContactManager {
	
	String FileName="contacts.csv";
	public List<Contact>Loadcontacts()
	{
		List<Contact> contacts=new ArrayList<>();
		try(BufferedReader br=new BufferedReader(new FileReader(FileName)))
		{
			String line;
			while((line=br.readLine())!=null)
			{
				String[] parts=line.split(",");
				if(parts.length==3)
				{
					contacts.add(new Contact(parts[0],parts[1],parts[2]));
				}
				
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		return contacts;
	}
	
	public void saveContact(List<Contact> contacts) {
		try(BufferedWriter bw=new BufferedWriter(new FileWriter(FileName)))
		{
			for(Contact c:contacts)
			{
				try {
					bw.write(c.toCSV());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					bw.newLine();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
	
	public static boolean isValidPhone(String phone)
	{
		return phone.matches("\\d{10}");
	}
	
	public static boolean isValidEmail(String email)
	{
		String emailregex="^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$";
		Pattern pattern=Pattern.compile(email);
		return pattern.matcher(email).matches();	
	}
	
	public void addContact()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter name: ");
		String name=sc.nextLine();
		System.out.println("Enter phone (10 digits): ");
		String phone=sc.nextLine();
		System.out.println("Enter email: ");
		String email=sc.nextLine();
		
		if(!isValidPhone(phone))
		{
			System.out.println("Invalid phone number format");
		}
		
		if(!isValidEmail(email))
		{
			System.out.println("Invalid email format");
		}
		
		List<Contact> contacts=Loadcontacts();
		for(Contact c:contacts)
		{
			if(c.getPhone().equals(phone))
			{
				System.out.println("Contact with this phone number already exists.");
				return;
			}
		}
		contacts.add(new Contact(name,phone,email));
		saveContact(contacts);
		System.out.println("Contact added successfully");
		
	}
	
	public void updateContact()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter phone number to update: ");
		String phone=sc.nextLine();
		List<Contact> contacts=Loadcontacts();
		boolean found=false;
		for(Contact c: contacts)
		{
			if(c.getPhone().equals(phone))
			{
				System.out.println("Enter new name: ");
				c.setName(sc.nextLine());
				System.out.println("Enter new email: ");
				String email=sc.nextLine();
				if(!isValidEmail(email))
				{
					System.out.println("Invalid email.");
					return;
					
				}
				c.setEmail(email);
				found=true;
				break;
			}
		}
		if(found)
		{
			saveContact(contacts);
			System.out.println("Contact updated");
			
		}else {
			System.out.println("Contact not found");
		}
	}
	
	 public void deleteContact() {
	        Scanner sc = new Scanner(System.in);
	        System.out.print("Enter phone number to delete: ");
	        String phone = sc.nextLine();

	        List<Contact> contacts = Loadcontacts();
	        boolean removed = contacts.removeIf(c -> c.getPhone().equals(phone));

	        if (removed) {
	            saveContact(contacts);
	            System.out.println("Contact deleted.");
	        } else {
	            System.out.println("Contact not found.");
	        }
	    }

	    public void searchContact() {
	        Scanner sc = new Scanner(System.in);
	        System.out.print("Search by name or phone: ");
	        String query = sc.nextLine().toLowerCase();

	        List<Contact> contacts = Loadcontacts();
	        boolean found = false;
	        for (Contact c : contacts) {
	            if (c.getName().toLowerCase().contains(query) || c.getPhone().contains(query)) {
	                System.out.println(c);
	                found = true;
	            }
	        }
	        if (!found) {
	            System.out.println("No matching contacts found.");
	        }
	    }

	    public void viewAll() {
	        List<Contact> contacts = Loadcontacts();
	        if (contacts.isEmpty()) {
	            System.out.println("No contacts available.");
	            return;
	        }
	        contacts.sort(Comparator.comparing(Contact::getName));
	        for (Contact c : contacts) {
	            System.out.println(c);
	        }
	    }

		
	}
